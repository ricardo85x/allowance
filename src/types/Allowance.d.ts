/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AllowanceInterface extends ethers.utils.Interface {
  functions: {
    "employee(address)": FunctionFragment;
    "fire(address)": FunctionFragment;
    "hire(address,string)": FunctionFragment;
    "job(address)": FunctionFragment;
    "payEmployee(address)": FunctionFragment;
    "sharedDeposit()": FunctionFragment;
    "withdrawAll()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "employee", values: [string]): string;
  encodeFunctionData(functionFragment: "fire", values: [string]): string;
  encodeFunctionData(
    functionFragment: "hire",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "job", values: [string]): string;
  encodeFunctionData(functionFragment: "payEmployee", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sharedDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "employee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fire", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hire", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "job", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharedDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {};
}

export class Allowance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AllowanceInterface;

  functions: {
    employee(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, boolean, BigNumber, BigNumber] & {
        boss: string;
        name: string;
        _address: string;
        employed: boolean;
        balance: BigNumber;
        oldBalance: BigNumber;
      }
    >;

    fire(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hire(
      _address: string,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    job(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { boss: string; balance: BigNumber }>;

    payEmployee(
      _address: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sharedDeposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  employee(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, boolean, BigNumber, BigNumber] & {
      boss: string;
      name: string;
      _address: string;
      employed: boolean;
      balance: BigNumber;
      oldBalance: BigNumber;
    }
  >;

  fire(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hire(
    _address: string,
    _name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  job(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { boss: string; balance: BigNumber }>;

  payEmployee(
    _address: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sharedDeposit(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    employee(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, boolean, BigNumber, BigNumber] & {
        boss: string;
        name: string;
        _address: string;
        employed: boolean;
        balance: BigNumber;
        oldBalance: BigNumber;
      }
    >;

    fire(_address: string, overrides?: CallOverrides): Promise<void>;

    hire(
      _address: string,
      _name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    job(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { boss: string; balance: BigNumber }>;

    payEmployee(_address: string, overrides?: CallOverrides): Promise<void>;

    sharedDeposit(overrides?: CallOverrides): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    employee(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    fire(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hire(
      _address: string,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    job(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    payEmployee(
      _address: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sharedDeposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    employee(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fire(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hire(
      _address: string,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    job(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payEmployee(
      _address: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sharedDeposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
