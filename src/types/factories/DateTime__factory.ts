/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { DateTime, DateTimeInterface } from "../DateTime";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "getMonth1",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x610153610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80631890e0f31461003a575b600080fd5b610054600480360381019061004f919061009c565b61006a565b60405161006191906100d4565b60405180910390f35b60008082141561007d5760029050610082565b600190505b919050565b60008135905061009681610106565b92915050565b6000602082840312156100ae57600080fd5b60006100bc84828501610087565b91505092915050565b6100ce816100f9565b82525050565b60006020820190506100e960008301846100c5565b92915050565b6000819050919050565b600060ff82169050919050565b61010f816100ef565b811461011a57600080fd5b5056fea2646970667358221220dd7a46e9ebc80fcc17c92f85fb183af71acbdf54a4e24c40661924300d27c9ba64736f6c63430008000033";

export class DateTime__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DateTime> {
    return super.deploy(overrides || {}) as Promise<DateTime>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DateTime {
    return super.attach(address) as DateTime;
  }
  connect(signer: Signer): DateTime__factory {
    return super.connect(signer) as DateTime__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DateTimeInterface {
    return new utils.Interface(_abi) as DateTimeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DateTime {
    return new Contract(address, _abi, signerOrProvider) as DateTime;
  }
}
